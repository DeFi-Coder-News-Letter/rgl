rgl.user2window             package:rgl             R Documentation

_C_o_n_v_e_r_t _b_e_t_w_e_e_n _r_g_l _u_s_e_r _a_n_d _w_i_n_d_o_w _c_o_o_r_d_i_n_a_t_e_s

_D_e_s_c_r_i_p_t_i_o_n:

     This function converts from 3-dimensional user coordinates to
     3-dimensional window coordinates.

_U_s_a_g_e:

     rgl.user2window(x, y = NULL, z = NULL, projection = rgl.projection())
     rgl.window2user(x, y = NULL, z = 0, projection = rgl.projection())
     rgl.projection()

_A_r_g_u_m_e_n_t_s:

 x, y, z: Input coordinates.  Any reasonable way of defining the
          coordinates is acceptable.  See the function 'xyz.coords' for
          details.

projection: The rgl projection to use 

_D_e_t_a_i_l_s:

     These functions convert between user coordinates and window
     coordinates.

     Window coordinates run from 0 to 1 in X, Y, and Z.  X runs from 0
     on the left to 1 on the right; Y runs from 0 at the bottom to 1 at
     the top; Z runs from 0 foremost to 1 in the background.  'rgl'
     does not currently display vertices plotted outside of this range,
     but in normal circumstances will automatically resize the display
     to show them.  In the example below this has been suppressed.

_V_a_l_u_e:

     The coordinate conversion functions produce a matrix with columns
     corresponding  to the X, Y, and Z coordinates.

     'rgl.projection()' returns a list containing the model matrix,
     projection matrix and viewport.  See 'par3d' for more details.

_A_u_t_h_o_r(_s):

     Ming Chen / Duncan Murdoch

_S_e_e _A_l_s_o:

     'select3d'

_E_x_a_m_p_l_e_s:

     open3d()
     points3d(rnorm(100), rnorm(100), rnorm(100))
     if (interactive() || !.Platform$OS=="unix") {
     # Calculate a square in the middle of the display and plot it
     square <- rgl.window2user(c(0.25, 0.25, 0.75, 0.75, 0.25), 
                               c(0.25, 0.75, 0.75, 0.25, 0.25), 0.5)
     par3d(ignoreExtent = TRUE)
     lines3d(square)
     par3d(ignoreExtent = FALSE)
     }

